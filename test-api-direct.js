// Test Open Food Facts API directly with proper async/await syntax\nasync function testOpenFoodFacts() {\n  const queries = ['banana', 'chicken biryani', 'paneer butter masala'];\n  \n  for (const query of queries) {\n    console.log(`\\n=== Testing search for: ${query} ===`);\n    const url = `https://world.openfoodfacts.org/cgi/search.pl?search_terms=${encodeURIComponent(query)}&search_simple=1&action=process&json=1&page_size=3`;\n    \n    try {\n      const response = await fetch(url);\n      console.log(`Status: ${response.status}`);\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log(`Found ${data.products?.length || 0} products`);\n        \n        if (data.products && data.products.length > 0) {\n          data.products.slice(0, 2).forEach((product, index) => {\n            console.log(`${index + 1}. ${product.product_name || product.generic_name || 'Unknown product'}`);\n            if (product.nutriments) {\n              console.log(`   Calories: ${product.nutriments.energy_value || 'N/A'}`);\n              console.log(`   Protein: ${product.nutriments.proteins_100g || 'N/A'}g`);\n              console.log(`   Carbs: ${product.nutriments.carbohydrates_100g || 'N/A'}g`);\n              console.log(`   Fat: ${product.nutriments.fat_100g || 'N/A'}g`);\n            }\n          });\n        }\n      } else {\n        console.log('Error:', response.status, response.statusText);\n      }\n    } catch (error) {\n      console.error(`Error searching for ${query}:`, error.message);\n    }\n  }\n}\n\ntestOpenFoodFacts();